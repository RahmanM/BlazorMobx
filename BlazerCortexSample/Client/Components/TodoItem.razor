
@using  Cortex.Net.Api

@attribute [Observer]
@inject ViewStore ViewStore
@inject TodoStore TodoStore

<li class="@(this.Todo.Completed?"completed":"") @(this.Todo == ViewStore.TodoBeingEdited?"editing":"")">
    <div class="view">
        <input class="toggle" type="checkbox" checked="@this.Todo.Completed" @onchange="Toggle">

        <label @ondblclick="DoubleClick">
            <span class="user-info">@this.Todo.UserName</span>   @this.Todo.Title
        </label>
        <button class="destroy" @onclick="Destroy"></button>
    </div>
    <input class="edit" @bind-value="editText" @onblur="Submit" @onkeydown="KeyDown">
</li>

@code {

    bool canceled = false;
    string editText = string.Empty;

    /// <summary>
    /// Gets or set the Todo parameter.
    /// </summary>
    [Parameter]
    public Todo Todo { get; set; }

    /// <summary>
    /// Handles the Toggle event.
    /// </summary>
    /// <param name="changeEventArgs">The change event args.</param>
    void Toggle(ChangeEventArgs changeEventArgs)
    {
        this.Todo.Toggle();
    }

    /// <summary>
    /// Destroys the todo item.
    /// </summary>
    /// <param name="mouseEventArgs">The mouse event args.</param>
    [Action]
    void Destroy(MouseEventArgs mouseEventArgs)
    {
        if (Todo.Store == null) Todo.Store = TodoStore;

        this.Todo.Destroy();
        this.ViewStore.TodoBeingEdited = this.Todo;
    }

    /// <summary>
    /// Handles double click on the label.
    /// </summary>
    /// <param name="mouseEventArgs">The mouse event args.</param>
    [Action]
    void DoubleClick(MouseEventArgs mouseEventArgs)
    {
        this.ViewStore.TodoBeingEdited = this.Todo;
        this.editText = this.Todo.Title;
    }

    /// <summary>
    /// Handles the blur event which equals a submit of the value.
    /// </summary>
    /// <param name="eventArgs"></param>
    [Action]
    void Submit(FocusEventArgs eventArgs)
    {
        if (!canceled)
        {
            var value = this.editText?.Trim();
            if (!string.IsNullOrEmpty(value))
            {
                this.Todo.Title = value;
                this.editText = value;
            }
            else
            {
                this.Todo.Destroy();
            }
            this.ViewStore.TodoBeingEdited = null;
        }
        canceled = false;
    }

    /// <summary>
    /// Handles a keydown event on the submit box.
    /// </summary>
    /// <param name="eventArgs"></param>
    [Action]
    void KeyDown(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Escape")
        {
            // prevent submit from running.
            canceled = true;
            this.ViewStore.TodoBeingEdited = null;
        }
        else if (eventArgs.Key == "Enter")
        {
            this.Submit(null);
        }
    }
}